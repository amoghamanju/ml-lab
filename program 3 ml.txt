import pandas as pd
import numpy as np

dataset=pd.read_csv('3weather.csv')
print("Dataset without names:",dataset)

attributes=('Outlook','Temperature','Humidity','Wind','PlayTennis')

def entropy(target_col):
    elements,counts=np.unique(target_col,return_counts=True)
    entropy=np.sum([(-counts[i]/np.sum(counts))*np.log2(counts[i]/np.sum(counts))for i in range (len(elements))])
    return entropy

def Info_Gain(data,split_attribute_name,target_name="class"):
    total_entropy=entropy(data[target_name])
    vals,counts=np.unique(data[split_attribute_name],return_counts=True)
    Weighted_Entropy=np.sum([(counts[i]/np.sum(counts))*entropy(data.where(data[split_attribute_name]==vals[i]).dropna()[target_name]) for i in range (len(vals))])
    Information_Gain=total_entropy-Weighted_entropy
    return Information_Gain
    
    def ID3(data,original_data,features,target_attribute_name="class",parent_node_class= None):
        if (len(np.unique(data[target_attribute_name])))<=1:
            return np.unique(data[target_attribute_name])[0]
        elif len(feature)==0:
            return parent_node_class
        else:
            
            unique_TA=np.unique(data[target_attribute_name],return_counts=True)
            max_unique_TA=np.argmax(unique_TA)
            parent_node_class=np.unique(data[target_attribute_name])[max_unique_TA]
            item_values=[Info_Gain(data,feature,target_attribute_name) for feature in features]
            print("Item values=",item_values)
            best_feature_index=np.argmax(item_values)
            best_feature=features[best_feature_index]
            tree={best_feature:{}}
            
            features=[i for i in feature if i!=best_feature]
            for value in np.unique(data[best_feature]):
                value=value
                sub_data=data.where(data[best_feature]==value).dropna()
                subtree=ID3(sub_data,dataset,feature,target_atrribute_name,parent_node_class)
                tree[best_feature][value]=subtree
            return tree
        
def train_test_split(dataset):
    training_data=dataset.iloc[:14]
    return training_data

def test(data,tree):
    queries=data.iloc[:,:-1].to_dict(orient="records")
    
training_data=train_test_split(dataset)
tree=ID3(training_data,training_data,training_data.columns[:-1])
print("Display tree",tree)
print("len=",len(training_data))
test_data=dataset.iloc[14:17].reset_index(drop=True)
test(test_data,tree)